#!/usr/bin/env ruby
require "io/console"
require "curses"

COLORS = [
  16,  # 0,0,0
  52,  # 1,0,0
  88,  # 2,0,0
  124, # 3,0,0
  160, # 4,0,0
  196, # 5,0,0
  202, # 5,1,0
  208, # 5,2,0
  214, # 5,3,0
  220, # 5,4,0
  226, # 5,5,0
  231, # 5,5,5
]
COLOR_HASH = (0..99).map {|c| [c, COLORS[(c / (100.0 / COLORS.length)).to_i]] }.to_h
STRING = " "
NOISE_ARRAY = (-3..3).to_a

# 下段にランダムに数字を入れます
# 上の段に下3個の平均を入れます
# さら上の段に下4個の平均を入れます
# 数字によって色づけをします
# 下段の数字を変えます
# 細かくします
# もっと細かくします
# ノイズを足します

def generate_array
  Kernel.srand ARGV[0].to_i if ARGV[0]

  window_height, window_width = IO.console.winsize # [height, width]
  # 一番下の行は内部的にだけ持ちたいので +1 行作る
  terminal = Array.new(window_height + 1) { Array.new(window_width) }

  # 下段にランダムに数字を入れます
  last_row = terminal[-1]
  last_row.fill { rand(100) }

  terminal
end

def update_last_row(terminal)
  # 下段の数字を変えます
  last_row = terminal[-1]
  last_row.fill { |i|
    (last_row[i] + rand(-2..2)).clamp(0, 99)
  }
  terminal
end

def update_array(terminal)
  window_height = terminal.length
  window_width  = terminal[0].length

  # 上の段に下3個の平均を入れます
  last_row = terminal[-1]
  next_row = terminal[-2]
  next_row.fill { |i|
    v = case i
        when 0
          (last_row[i] + last_row[i+1]) / 2
        when window_width - 1
          (last_row[i-1] + last_row[i]) / 2
        else
          (last_row[i-1] + last_row[i] + last_row[i+1]) / 3
        end
    # ノイズを足します
    noise = NOISE_ARRAY.sample
    v = v + noise
    v.clamp(0, 99)
  }

  # さら上の段に下4個の平均を入れます
  (window_height - 2).times do |i|
    row = terminal[window_height - (3 + i)]
    row_1 = terminal[window_height - (2 + i)]
    row_2 = terminal[window_height - (1 + i)]
    row.fill { |j|
      v = case j
          when 0
            (row_1[j] + row_1[j+1] + row_2[j]) / 3
          when window_width - 1
            (row_1[j-1] + row_1[j] + row_2[j]) / 3
          else
            (row_1[j-1] + row_1[j] + row_1[j+1] + row_2[j]) / 4
          end
      # ノイズを足します
      noise = NOISE_ARRAY.sample
      v = v + noise
      v.clamp(0, 99)
    }
  end
  terminal
end

def inner_main_loop(terminal)
  terminal = update_last_row(terminal)
  terminal = update_array(terminal)
  terminal.each_with_index { |row, i|
    break if i == terminal.length - 1 # 最終行はスキップ
    row.each { |cell|
      Curses.attron(Curses.color_pair(COLOR_HASH[cell])) {
        Curses.addstr(STRING)
      }
    }
  }
  Curses.refresh
  sleep 0.15 unless ENV["BENCHMARK"]
  Curses.clear
end

def main
  start_at = Time.now.to_f
  Curses.init_screen
  Curses.start_color

  COLORS.each { |color| Curses.init_pair(color, color, color) }

  terminal = generate_array
  if ENV["BENCHMARK"]
    require "rblineprof"
    profile = lineprof(/./) do
      sleep 0.001
      100.times {
        inner_main_loop(terminal)
      }
    end
  else
    loop {
      inner_main_loop(terminal)
    }
  end
ensure
  Curses.close_screen

  if ENV["BENCHMARK"]
    file = profile.keys.first

    File.readlines(file).each_with_index do |line, num|
      wall, cpu, calls, allocations = profile[file][num + 1]

      if wall > 0 || cpu > 0 || calls > 0
        printf(
          "% 5.1fms + % 6.1fms (% 4d) | %s",
          cpu / 1000.0,
          (wall - cpu) / 1000.0,
          calls,
          line
        )
      else
        printf "                          | %s", line
      end
    end
  end
  puts Time.now.to_f - start_at
end

main
