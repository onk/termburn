                          | require "io/console"
                          | require "curses"
                          | 
                          | COLORS = [
                          |   16,  # 0,0,0
                          |   52,  # 1,0,0
                          |   88,  # 2,0,0
                          |   124, # 3,0,0
                          |   160, # 4,0,0
                          |   196, # 5,0,0
                          |   202, # 5,1,0
                          |   208, # 5,2,0
                          |   214, # 5,3,0
                          |   220, # 5,4,0
                          |   226, # 5,5,0
                          |   231, # 5,5,5
                          | ]
                          | COLOR_HASH = (0..99).map {|c| [c, COLORS[(c / (100.0 / COLORS.length)).to_i]] }.to_h
                          | STRING = " "
                          | NOISE_ARRAY = (-3..3).to_a
                          | 
                          | # 下段にランダムに数字を入れます
                          | # 上の段に下3個の平均を入れます
                          | # さら上の段に下4個の平均を入れます
                          | # 数字によって色づけをします
                          | # 下段の数字を変えます
                          | # 細かくします
                          | # もっと細かくします
                          | # ノイズを足します
                          | 
                          | def generate_array
                          |   Kernel.srand ARGV[0].to_i if ARGV[0]
                          | 
                          |   window_height, window_width = IO.console.winsize # [height, width]
                          |   # 一番下の行は内部的にだけ持ちたいので +1 行作る
                          |   terminal = Array.new(window_height + 1) { Array.new(window_width) }
                          | 
                          |   # 下段にランダムに数字を入れます
                          |   last_row = terminal[-1]
                          |   last_row.fill { rand(100) }
                          | 
                          |   terminal
                          | end
                          | 
                          | def update_last_row(terminal)
                          |   # 下段の数字を変えます
                          |   last_row = terminal[-1]
 51.0ms +   42.3ms ( 100) |   last_row.fill { |i|
 40.8ms +   35.4ms ( 69940) |     (last_row[i] + rand(-2..2)).clamp(0, 99)
                          |   }
                          |   terminal
                          | end
                          | 
                          | def update_array(terminal)
                          |   window_height = terminal.length
                          |   window_width  = terminal[0].length
                          | 
                          |   # 上の段に下3個の平均を入れます
                          |   last_row = terminal[-1]
                          |   next_row = terminal[-2]
 60.6ms +   48.0ms ( 100) |   next_row.fill { |i|
                          |     v = case i
  4.0ms +    3.4ms ( 11700) |         when 0
                          |           (last_row[i] + last_row[i+1]) / 2
  3.9ms +    3.5ms ( 11600) |         when window_width - 1
                          |           (last_row[i-1] + last_row[i]) / 2
                          |         else
                          |           (last_row[i-1] + last_row[i] + last_row[i+1]) / 3
                          |         end
                          |     # ノイズを足します
  4.1ms +    3.4ms ( 11700) |     noise = NOISE_ARRAY.sample
                          |     v = v + noise
 28.5ms +   24.0ms ( 46799) |     v.clamp(0, 99)
                          |   }
                          | 
                          |   # さら上の段に下4個の平均を入れます
 1510.5ms +  1186.0ms ( 100) |   (window_height - 2).times do |i|
                          |     row = terminal[window_height - (3 + i)]
                          |     row_1 = terminal[window_height - (2 + i)]
                          |     row_2 = terminal[window_height - (1 + i)]
 1508.6ms +  1185.2ms ( 2500) |     row.fill { |j|
                          |       v = case j
 100.0ms +   85.0ms ( 292500) |           when 0
                          |             (row_1[j] + row_1[j+1] + row_2[j]) / 3
 99.4ms +   84.4ms ( 290000) |           when window_width - 1
                          |             (row_1[j-1] + row_1[j] + row_2[j]) / 3
                          |           else
                          |             (row_1[j-1] + row_1[j] + row_1[j+1] + row_2[j]) / 4
                          |           end
                          |       # ノイズを足します
 101.7ms +   85.2ms ( 292500) |       noise = NOISE_ARRAY.sample
                          |       v = v + noise
 712.7ms +  593.2ms ( 1170000) |       v.clamp(0, 99)
                          |     }
                          |   end
                          |   terminal
                          | end
                          | 
                          | def inner_main_loop(terminal)
 51.1ms +   42.4ms ( 100) |   terminal = update_last_row(terminal)
 1571.2ms +  1234.1ms ( 100) |   terminal = update_array(terminal)
 729.2ms +  530.1ms ( 200) |   terminal.each_with_index { |row, i|
                          |     break if i == terminal.length - 1 # 最終行はスキップ
 727.0ms +  529.2ms ( 2600) |     row.each { |cell|
 483.5ms +  351.3ms ( 608400) |       Curses.attron(Curses.color_pair(COLOR_HASH[cell])) {
 132.4ms +   88.6ms ( 304200) |         Curses.addstr(STRING)
                          |       }
                          |     }
                          |   }
 351.2ms +   11.8ms ( 100) |   Curses.refresh
  0.6ms +    0.0ms ( 100) |   sleep 0.15 unless ENV["BENCHMARK"]
  1.1ms +    0.0ms ( 100) |   Curses.clear
                          | end
                          | 
                          | def main
                          |   start_at = Time.now.to_f
                          |   Curses.init_screen
                          |   Curses.start_color
                          | 
                          |   COLORS.each { |color| Curses.init_pair(color, color, color) }
                          | 
                          |   terminal = generate_array
                          |   if ENV["BENCHMARK"]
                          |     require "rblineprof"
                          |     profile = lineprof(/./) do
  0.1ms +    1.4ms (   1) |       sleep 0.001
 2705.3ms +  1818.7ms (   1) |       100.times {
 2705.1ms +  1818.7ms ( 100) |         inner_main_loop(terminal)
                          |       }
                          |     end
                          |   else
                          |     loop {
                          |       inner_main_loop(terminal)
                          |     }
                          |   end
                          | ensure
                          |   Curses.close_screen
                          | 
                          |   if ENV["BENCHMARK"]
                          |     file = profile.keys.first
                          | 
                          |     File.readlines(file).each_with_index do |line, num|
                          |       wall, cpu, calls, allocations = profile[file][num + 1]
                          | 
                          |       if wall > 0 || cpu > 0 || calls > 0
                          |         printf(
                          |           "% 5.1fms + % 6.1fms (% 4d) | %s",
                          |           cpu / 1000.0,
                          |           (wall - cpu) / 1000.0,
                          |           calls,
                          |           line
                          |         )
                          |       else
                          |         printf "                          | %s", line
                          |       end
                          |     end
                          |   end
                          |   puts Time.now.to_f - start_at
                          | end
                          | 
                          | main
4.5315258502960205
